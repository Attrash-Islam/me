{"version":3,"sources":["layout/Main/styled.js","components/Section/index.js","components/Color/index.js","components/Link/styled.js","components/Link/index.js","components/Background/index.js","layout/Main/index.js","serviceWorker.js","index.js","assets/my-face.jpg"],"names":["Title","styled","h1","_templateObject","Description","p","_templateObject2","Face","div","_templateObject3","myFace","Section","props","react_default","a","createElement","Section_templateObject","Color","_ref","_ref$color","color","children","style","Div","styled_templateObject","Card","url","name","description","paddingBottom","href","target","rel","Background","Background_templateObject","Main","_useState","useState","_useState2","Object","slicedToArray","repos","setRepos","useEffect","Promise","all","fetch","then","res","json","repositories","concat","toConsumableArray","sort","b","Date","updated_at","getTime","document","body","addEventListener","tagName","parentElement","scrollIntoView","behavior","block","Fragment","components_Section","className","width","height","padding","components_Background","position","zIndex","components_Color","map","repo","fork","stargazers_count","join","Link","key","id","html_url","articles","article","Boolean","window","location","hostname","match","ReactDOM","render","layout_Main","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__"],"mappings":"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","file":"static/js/main.9a621273.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport myFace from '../../assets/my-face.jpg';\n\nexport const Title = styled.h1`\n    margin: .5em;\n`;\n\nexport const Description = styled.p`\n    color: #9E9E9E;\n`;\n\nexport const Face = styled.div`\n    background-image: url(${myFace});\n    border-radius: 50%;\n    background-size: 8em;\n    height: 8em;\n    width: 8em;\n`;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Section = styled(props => <section {...props} />)`\n    position: relative;\n    display: flex;\n    box-sizing: border-box;\n    align-items: center;\n    align-self: start;\n    justify-content: center;\n    flex-direction: column;\n`;\n\nexport default Section;","import React from 'react';\n\nconst Color = ({ color = '#E91E63', children }) => <span style={{ color }}>{children}</span>;\n\nexport default Color;","import styled from 'styled-components';\n\nexport const Div = styled.div`\n    margin: 0 0 .5em;\n    color: #9E9E9E;\n`;","import React from 'react';\nimport { Div } from './styled';\n\nconst Card = ({ url, name, description }) => (\n    <li style={{paddingBottom: '.5em'}}>\n        <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{name}</a><Div>{description}</Div>\n    </li>\n);\n\nexport default Card;","import styled from 'styled-components';\n\nconst Background = styled.div`\n    background: #000 url(https://source.unsplash.com/1024x640/?dark,night,stars,galaxy);\n    background-size: cover;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: 1;\n    filter: brightness(.5) blur(10px);\n`;\n\nexport default Background;","import React, {useEffect, useState} from 'react'\nimport { Title, Description, Face } from './styled';\nimport articles from '../../assets/articles.json';\nimport Section from '../../components/Section';\nimport Color from '../../components/Color';\nimport Link from '../../components/Link';\nimport Background from '../../components/Background';\n\nconst Main = () => {\n    const [repos, setRepos] = useState([]);\n\n    const addRepos = (repositories) => {\n        setRepos([\n            ...repos,\n            ...repositories\n        ].sort((a, b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime()));\n    }\n\n    useEffect(() => {\n        Promise.all([\n            fetch('https://api.github.com/repos/fiverr/passable').then(res => res.json()),\n            fetch('https://api.github.com/users/ealush/repos').then(res => res.json()),\n        ]).then((res) => {\n            addRepos([res[0], ...res[1]])\n        });\n    }, []);\n\n    useEffect(() => {\n        document.body.addEventListener('click', ({target}) => {\n            if (target && target.tagName === 'H2') {\n                target.parentElement.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'start'\n                })\n            }\n        });\n    });\n\n    return (\n        <>\n            <Section className=\"center\" style={{ width: '100%', height: 'calc(100vh - 6em)', padding: '3em' }}>\n                <Background />\n                <div style={{position: 'relative', zIndex: 1}}>\n                    <Face className=\"center\"/>\n                    <Title>\n                        Hi<Color>,</Color> I AM<br/>EVYATAR<Color>.</Color>\n                    </Title>\n                    <Description>\n                        Lead front end developer at fiverr.com\n                    </Description>\n                </div>\n            </Section>\n            <Section className=\"grid col-12-xs col-6-md\">\n                <div className=\"col-10-xs col-7-lg\">\n                    <h2>CODE</h2>\n                    <nav style={{padding: '20px 0'}}>\n                        <ul>\n                            {repos.map((repo) => {\n                                if (repo.fork) {\n                                    return null;\n                                }\n\n                                const name = [\n                                    repo.name,\n                                    repo.stargazers_count ? ` (ðŸŒŸ${repo.stargazers_count})` : ''\n                                ].join('');\n\n                                return <Link key={repo.id}\n                                    url={repo.html_url}\n                                    name={name}\n                                    description={repo.description}/>\n                            })}\n                        </ul>\n                    </nav>\n                </div>\n            </Section>\n            <Section className=\"grid col-12-xs col-6-md\">\n                <div className=\"col-10-xs col-7-lg\">\n                    <h2>Word</h2>\n                    <nav style={{padding: '20px 0'}}>\n                        <ul className=\"grid\">\n                            {articles.map((article) => {\n                                return <Link key={article.url}\n                                    url={article.url}\n                                    name={article.name}\n                                    description={article.description}/>\n                            })}\n                        </ul>\n                    </nav>\n                </div>\n            </Section>\n        </>\n    )\n};\n\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './layout/Main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/my-face.d7f1505f.jpg\";"],"sourceRoot":""}